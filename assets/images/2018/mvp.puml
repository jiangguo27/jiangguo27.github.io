@startuml

class TasksAcvitity {
    - TasksPresenter mTasksPresenter;
}

class TasksPresenter {
    - View mTasksView
    +TasksPresenter(TasksRepository tasksRepository, View tasksView)
}
class TasksFragment {
    - Presenter presenter
}

interface View {
    void setLoadingIndicator(boolean active);
    void showTasks(List<Task> tasks);
    void showAddTask();
    void showTaskDetailsUi(String taskId);
    void showTaskMarkedComplete();
    void showTaskMarkedActive();
    void showCompletedTasksCleared();
    void showLoadingTasksError();
    void showNoTasks();
    void showActiveFilterLabel();
    void showCompletedFilterLabel();
    void showAllFilterLabel();
    void showNoActiveTasks();
    void showNoCompletedTasks();
    void showSuccessfullySavedMessage();
    boolean isActive();
    void showFilteringPopUpMenu();
}

interface Presenter {
    void result(int requestCode, int resultCode);
    void loadTasks(boolean forceUpdate);
    void addNewTask();
    void openTaskDetails(@NonNull Task requestedTask);
    void completeTask(@NonNull Task completedTask);
    void activateTask(@NonNull Task activeTask);
    void clearCompletedTasks();
    void setFiltering(TasksFilterType requestType);
    TasksFilterType getFiltering();
}

interface BaseView<T> {
    void setPresenter(T presenter);
}

interface BasePresenter {
    void start();
}

TasksPresenter *-- TasksAcvitity : contains
TasksFragment *-- TasksAcvitity : contains

'Presenter *-- BaseView : contains
View *-- TasksPresenter : contains
Presenter *-- TasksFragment : contains

Presenter <|-- TasksPresenter: extension
View <|-- TasksFragment: extension

BaseView <|-- View: extends<Presenter>
BasePresenter <|-- Presenter: extension

@enduml